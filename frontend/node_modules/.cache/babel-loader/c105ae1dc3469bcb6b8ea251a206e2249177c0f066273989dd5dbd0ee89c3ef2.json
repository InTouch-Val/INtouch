{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aksma\\\\Desktop\\\\inTech prototype\\\\intouch\\\\src\\\\components\\\\AddNote.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { EditorState } from 'draft-js';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport EditorToolbar from '../service/editors-toolbar';\nimport API from '../service/axios';\nimport \"../css/note.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddNote = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n  const [title, setTitle] = useState('');\n  const [isSuccess, setIsSuccess] = useState(false);\n  const navigate = useNavigate();\n  const handleSaveNote = async () => {\n    // Here you would convert the editorState to HTML or text depending on your backend\n    const noteContent = JSON.stringify(editorState); // Replace with actual conversion\n    try {\n      // You would adjust the API endpoint and data structure as per your backend requirements\n      const response = await API.post('/notes/', {\n        content: noteContent,\n        title: title,\n        client_id: id\n      });\n      if (response.status === 201) {\n        setIsSuccess(true);\n        setTimeout(() => {\n          navigate('/notes'); // Redirect to the notes tab\n        }, 2000);\n      }\n    } catch (error) {\n      console.error('Error saving note:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"add-note-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add Note\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }, this), isSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"success-message\",\n      children: \"Note created successfully!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Note Title\",\n      value: title,\n      onChange: e => setTitle(e.target.value),\n      className: \"note-title-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(EditorToolbar, {\n      editorState: editorState,\n      setEditorState: setEditorState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSaveNote,\n      className: \"action-button\",\n      children: \"Save Note\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(AddNote, \"wA+sUF5vxMVp2YWBmRJcaZcVg8o=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = AddNote;\nexport default AddNote;\nvar _c;\n$RefreshReg$(_c, \"AddNote\");","map":{"version":3,"names":["React","useState","EditorState","useNavigate","useParams","EditorToolbar","API","jsxDEV","_jsxDEV","AddNote","_s","id","editorState","setEditorState","createEmpty","title","setTitle","isSuccess","setIsSuccess","navigate","handleSaveNote","noteContent","JSON","stringify","response","post","content","client_id","status","setTimeout","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/aksma/Desktop/inTech prototype/intouch/src/components/AddNote.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { EditorState } from 'draft-js';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport EditorToolbar from '../service/editors-toolbar'\r\nimport API from '../service/axios'; \r\nimport \"../css/note.css\"\r\n\r\nconst AddNote = () => {\r\n  const {id} = useParams()\r\n  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\r\n  const [title, setTitle] = useState('')\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const handleSaveNote = async () => {\r\n    // Here you would convert the editorState to HTML or text depending on your backend\r\n    const noteContent = JSON.stringify(editorState); // Replace with actual conversion\r\n    try {\r\n      // You would adjust the API endpoint and data structure as per your backend requirements\r\n      const response = await API.post('/notes/',\r\n       { \r\n        content: noteContent,\r\n        title: title,\r\n        client_id: id\r\n        });\r\n      if (response.status === 201) {\r\n        setIsSuccess(true);\r\n        setTimeout(() => {\r\n          navigate('/notes'); // Redirect to the notes tab\r\n        }, 2000); \r\n      }\r\n    } catch (error) {\r\n      console.error('Error saving note:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"add-note-container\">\r\n    <h2>Add Note</h2>\r\n    {isSuccess && <div className=\"success-message\">Note created successfully!</div>}\r\n    <input\r\n      type=\"text\"\r\n      placeholder=\"Note Title\"\r\n      value={title}\r\n      onChange={(e) => setTitle(e.target.value)}\r\n      className=\"note-title-input\"\r\n    />\r\n    <EditorToolbar\r\n      editorState={editorState}\r\n      setEditorState={setEditorState}\r\n    />\r\n    <button onClick={handleSaveNote} className=\"action-button\">\r\n      Save Note\r\n    </button>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default AddNote;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}