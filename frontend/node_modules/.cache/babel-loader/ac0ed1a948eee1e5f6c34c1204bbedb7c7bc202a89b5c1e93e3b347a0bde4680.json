{"ast":null,"code":"import axios from 'axios';\n\n// Создаем экземпляр axios с базовой конфигурацией\nconst API = axios.create({\n  baseURL: 'http://127.0.0.1:8000/api/v1/',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Функция для обновления токенов\nasync function refreshTokens() {\n  try {\n    const refreshToken = localStorage.getItem('refreshToken');\n    if (!refreshToken) {\n      throw new Error(\"No refresh token available\");\n    }\n    const response = await axios.post('http://127.0.0.1:8000/api/v1/token/refresh/', {\n      refresh: refreshToken\n    });\n    console.log(response);\n    const {\n      access: newAccessToken,\n      refresh: newRefreshToken\n    } = response.data;\n    localStorage.setItem('accessToken', newAccessToken);\n    localStorage.setItem('refreshToken', newRefreshToken);\n    return newAccessToken;\n  } catch (error) {\n    console.error('Error updating tokens:', error);\n    // Обработка ошибки (например, перенаправление на страницу входа)\n  }\n}\n\n// Интерсептор запросов\nAPI.interceptors.request.use(config => {\n  const accessToken = localStorage.getItem('accessToken');\n  if (accessToken) {\n    config.headers['Authorization'] = `Bearer ${accessToken}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Интерсептор ответов\nAPI.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    const newAccessToken = await refreshTokens();\n    originalRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;\n    return API(originalRequest);\n  }\n  return Promise.reject(error);\n});\nexport default API;","map":{"version":3,"names":["axios","API","create","baseURL","headers","refreshTokens","refreshToken","localStorage","getItem","Error","response","post","refresh","console","log","access","newAccessToken","newRefreshToken","data","setItem","error","interceptors","request","use","config","accessToken","Promise","reject","originalRequest","status","_retry"],"sources":["C:/Users/aksma/Desktop/inTech prototype/intouch/src/service/axios.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Создаем экземпляр axios с базовой конфигурацией\r\nconst API = axios.create({\r\n  baseURL: 'http://127.0.0.1:8000/api/v1/',\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Функция для обновления токенов\r\nasync function refreshTokens() {\r\n  try {\r\n    const refreshToken = localStorage.getItem('refreshToken');\r\n    if (!refreshToken) {\r\n      throw new Error(\"No refresh token available\");\r\n    }\r\n    const response = await axios.post('http://127.0.0.1:8000/api/v1/token/refresh/', { refresh: refreshToken });\r\n    console.log(response);\r\n    const { access: newAccessToken, refresh: newRefreshToken } = response.data;\r\n    localStorage.setItem('accessToken', newAccessToken);\r\n    localStorage.setItem('refreshToken', newRefreshToken);\r\n    return newAccessToken;\r\n  } catch (error) {\r\n    console.error('Error updating tokens:', error);\r\n    // Обработка ошибки (например, перенаправление на страницу входа)\r\n  }\r\n}\r\n\r\n// Интерсептор запросов\r\nAPI.interceptors.request.use(\r\n  config => {\r\n    const accessToken = localStorage.getItem('accessToken');\r\n    if (accessToken) {\r\n      config.headers['Authorization'] = `Bearer ${accessToken}`;\r\n    }\r\n    return config;\r\n  },\r\n  error => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Интерсептор ответов\r\nAPI.interceptors.response.use(\r\n  response => response,\r\n  async error => {\r\n    const originalRequest = error.config;\r\n    if (error.response.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      const newAccessToken = await refreshTokens();\r\n      originalRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;\r\n      return API(originalRequest);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default API;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,+BAA+B;EACxCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,eAAeC,aAAaA,CAAA,EAAG;EAC7B,IAAI;IACF,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IACzD,IAAI,CAACF,YAAY,EAAE;MACjB,MAAM,IAAIG,KAAK,CAAC,4BAA4B,CAAC;IAC/C;IACA,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,IAAI,CAAC,6CAA6C,EAAE;MAAEC,OAAO,EAAEN;IAAa,CAAC,CAAC;IAC3GO,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;IACrB,MAAM;MAAEK,MAAM,EAAEC,cAAc;MAAEJ,OAAO,EAAEK;IAAgB,CAAC,GAAGP,QAAQ,CAACQ,IAAI;IAC1EX,YAAY,CAACY,OAAO,CAAC,aAAa,EAAEH,cAAc,CAAC;IACnDT,YAAY,CAACY,OAAO,CAAC,cAAc,EAAEF,eAAe,CAAC;IACrD,OAAOD,cAAc;EACvB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdP,OAAO,CAACO,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C;EACF;AACF;;AAEA;AACAnB,GAAG,CAACoB,YAAY,CAACC,OAAO,CAACC,GAAG,CAC1BC,MAAM,IAAI;EACR,MAAMC,WAAW,GAAGlB,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EACvD,IAAIiB,WAAW,EAAE;IACfD,MAAM,CAACpB,OAAO,CAAC,eAAe,CAAC,GAAI,UAASqB,WAAY,EAAC;EAC3D;EACA,OAAOD,MAAM;AACf,CAAC,EACDJ,KAAK,IAAI;EACP,OAAOM,OAAO,CAACC,MAAM,CAACP,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAnB,GAAG,CAACoB,YAAY,CAACX,QAAQ,CAACa,GAAG,CAC3Bb,QAAQ,IAAIA,QAAQ,EACpB,MAAMU,KAAK,IAAI;EACb,MAAMQ,eAAe,GAAGR,KAAK,CAACI,MAAM;EACpC,IAAIJ,KAAK,CAACV,QAAQ,CAACmB,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC5DF,eAAe,CAACE,MAAM,GAAG,IAAI;IAC7B,MAAMd,cAAc,GAAG,MAAMX,aAAa,CAAC,CAAC;IAC5CuB,eAAe,CAACxB,OAAO,CAAC,eAAe,CAAC,GAAI,UAASY,cAAe,EAAC;IACrE,OAAOf,GAAG,CAAC2B,eAAe,CAAC;EAC7B;EACA,OAAOF,OAAO,CAACC,MAAM,CAACP,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAenB,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}