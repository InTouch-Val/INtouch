{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aksma\\\\Desktop\\\\inTech prototype\\\\intouch\\\\src\\\\service\\\\forms\\\\password-reset-mock.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport API from '../service/axios';\nimport SetNewUserPassword from './set-new-user-password';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PasswordResetMock = () => {\n  _s();\n  const {\n    pk,\n    token\n  } = useParams();\n  const [isValidLink, setIsValidLink] = useState(false);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const verifyResetLink = async () => {\n      try {\n        const response = await API.get(`password/reset/confirm/${pk}/${token}/`);\n        if (response.status === 200) {\n          setIsValidLink(true);\n          console.log(response);\n        }\n      } catch (error) {\n        console.error('Error verifying reset link:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    verifyResetLink();\n  }, [pk, token]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 12\n    }, this);\n  }\n  if (!isValidLink) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Invalid or expired link.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(SetNewUserPassword, {\n    pk: pk,\n    token: token\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(PasswordResetMock, \"bnewFeO1zCKzYKrt43DqikuySwI=\", false, function () {\n  return [useParams];\n});\n_c = PasswordResetMock;\nexport default PasswordResetMock;\nvar _c;\n$RefreshReg$(_c, \"PasswordResetMock\");","map":{"version":3,"names":["React","useState","useEffect","useParams","API","SetNewUserPassword","jsxDEV","_jsxDEV","PasswordResetMock","_s","pk","token","isValidLink","setIsValidLink","loading","setLoading","verifyResetLink","response","get","status","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/aksma/Desktop/inTech prototype/intouch/src/service/forms/password-reset-mock.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport API from '../service/axios';\r\nimport SetNewUserPassword from './set-new-user-password';\r\n\r\nconst PasswordResetMock = () => {\r\n  const { pk, token } = useParams();\r\n  const [isValidLink, setIsValidLink] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const verifyResetLink = async () => {\r\n      try {\r\n        const response = await API.get(`password/reset/confirm/${pk}/${token}/`);\r\n        if (response.status === 200) {\r\n          setIsValidLink(true);\r\n          console.log(response);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error verifying reset link:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    verifyResetLink();\r\n  }, [pk, token]);\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (!isValidLink) {\r\n    return <div>Invalid or expired link.</div>;\r\n  }\r\n\r\n  return (\r\n    <SetNewUserPassword pk={pk} token={token} />\r\n  );\r\n};\r\n\r\nexport default PasswordResetMock;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,GAAG,MAAM,kBAAkB;AAClC,OAAOC,kBAAkB,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM;IAAEC,EAAE;IAAEC;EAAM,CAAC,GAAGR,SAAS,CAAC,CAAC;EACjC,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMc,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMb,GAAG,CAACc,GAAG,CAAE,0BAAyBR,EAAG,IAAGC,KAAM,GAAE,CAAC;QACxE,IAAIM,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;UAC3BN,cAAc,CAAC,IAAI,CAAC;UACpBO,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;QACvB;MACF,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD,CAAC,SAAS;QACRP,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,CAACN,EAAE,EAAEC,KAAK,CAAC,CAAC;EAEf,IAAIG,OAAO,EAAE;IACX,oBAAOP,OAAA;MAAAgB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EAEA,IAAI,CAACf,WAAW,EAAE;IAChB,oBAAOL,OAAA;MAAAgB,QAAA,EAAK;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC5C;EAEA,oBACEpB,OAAA,CAACF,kBAAkB;IAACK,EAAE,EAAEA,EAAG;IAACC,KAAK,EAAEA;EAAM;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAEhD,CAAC;AAAClB,EAAA,CAlCID,iBAAiB;EAAA,QACCL,SAAS;AAAA;AAAAyB,EAAA,GAD3BpB,iBAAiB;AAoCvB,eAAeA,iBAAiB;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}