{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aksma\\\\Desktop\\\\inTech prototype\\\\intouch\\\\src\\\\components\\\\AddNote.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { EditorState } from 'draft-js';\nimport { useNavigate } from 'react-router-dom';\nimport EditorToolbar from '../components/';\nimport API from '../service/axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddNote = () => {\n  _s();\n  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n  const [isSuccess, setIsSuccess] = useState(false);\n  const navigate = useNavigate();\n  const handleSaveNote = async () => {\n    // Here you would convert the editorState to HTML or text depending on your backend\n    const noteContent = JSON.stringify(editorState); // Replace with actual conversion\n    try {\n      // You would adjust the API endpoint and data structure as per your backend requirements\n      const response = await API.post('/notes', {\n        content: noteContent\n      });\n      if (response.status === 201) {\n        setIsSuccess(true);\n        setTimeout(() => {\n          navigate('/notes'); // Redirect to the notes tab\n        }, 2000); // Redirect after 2 seconds\n      }\n    } catch (error) {\n      console.error('Error saving note:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"add-note-container\",\n    children: [isSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"success-message\",\n      children: \"Note created successfully!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(EditorToolbar, {\n      editorState: editorState,\n      setEditorState: setEditorState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSaveNote,\n      className: \"save-note-button\",\n      children: \"Save Note\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(AddNote, \"LB5y2qwAetQTo/ixPTuZcQriSiY=\", false, function () {\n  return [useNavigate];\n});\n_c = AddNote;\nexport default AddNote;\nvar _c;\n$RefreshReg$(_c, \"AddNote\");","map":{"version":3,"names":["React","useState","EditorState","useNavigate","EditorToolbar","API","jsxDEV","_jsxDEV","AddNote","_s","editorState","setEditorState","createEmpty","isSuccess","setIsSuccess","navigate","handleSaveNote","noteContent","JSON","stringify","response","post","content","status","setTimeout","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/aksma/Desktop/inTech prototype/intouch/src/components/AddNote.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { EditorState } from 'draft-js';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport EditorToolbar from '../components/'\r\nimport API from '../service/axios'; \r\n\r\nconst AddNote = () => {\r\n  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const handleSaveNote = async () => {\r\n    // Here you would convert the editorState to HTML or text depending on your backend\r\n    const noteContent = JSON.stringify(editorState); // Replace with actual conversion\r\n    try {\r\n      // You would adjust the API endpoint and data structure as per your backend requirements\r\n      const response = await API.post('/notes', { content: noteContent });\r\n      if (response.status === 201) {\r\n        setIsSuccess(true);\r\n        setTimeout(() => {\r\n          navigate('/notes'); // Redirect to the notes tab\r\n        }, 2000); // Redirect after 2 seconds\r\n      }\r\n    } catch (error) {\r\n      console.error('Error saving note:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"add-note-container\">\r\n      {isSuccess && <div className=\"success-message\">Note created successfully!</div>}\r\n      <EditorToolbar\r\n        editorState={editorState}\r\n        setEditorState={setEditorState}\r\n      />\r\n      <button onClick={handleSaveNote} className=\"save-note-button\">\r\n        Save Note\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddNote;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,UAAU;AACtC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,aAAa,MAAM,gBAAgB;AAC1C,OAAOC,GAAG,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,MAAMC,WAAW,CAACU,WAAW,CAAC,CAAC,CAAC;EAC/E,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMc,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAE9B,MAAMa,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC;IACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,SAAS,CAACT,WAAW,CAAC,CAAC,CAAC;IACjD,IAAI;MACF;MACA,MAAMU,QAAQ,GAAG,MAAMf,GAAG,CAACgB,IAAI,CAAC,QAAQ,EAAE;QAAEC,OAAO,EAAEL;MAAY,CAAC,CAAC;MACnE,IAAIG,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;QAC3BT,YAAY,CAAC,IAAI,CAAC;QAClBU,UAAU,CAAC,MAAM;UACfT,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;QACtB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;MACZ;IACF,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC5C;EACF,CAAC;EAED,oBACElB,OAAA;IAAKoB,SAAS,EAAC,oBAAoB;IAAAC,QAAA,GAChCf,SAAS,iBAAIN,OAAA;MAAKoB,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAAC;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC/EzB,OAAA,CAACH,aAAa;MACZM,WAAW,EAAEA,WAAY;MACzBC,cAAc,EAAEA;IAAe;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,eACFzB,OAAA;MAAQ0B,OAAO,EAAEjB,cAAe;MAACW,SAAS,EAAC,kBAAkB;MAAAC,QAAA,EAAC;IAE9D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAACvB,EAAA,CAlCID,OAAO;EAAA,QAGML,WAAW;AAAA;AAAA+B,EAAA,GAHxB1B,OAAO;AAoCb,eAAeA,OAAO;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}