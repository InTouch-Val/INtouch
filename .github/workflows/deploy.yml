name: Deploy to Server

on:
  push:
    branches:
      - develop
      - feature/develop_server_deploy

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine Docker Tag
        id: vars
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/feature/develop_server_deploy" ]]; then
            echo "TAG=test" >> "$GITHUB_ENV"
          elif [[ "${{ github.ref }}" == refs/heads/release-* ]]; then
            echo "TAG=release" >> "$GITHUB_ENV"
          else
            echo "TAG=latest" >> "$GITHUB_ENV"
          fi

      - name: Build Docker image
        working-directory: ./backend
        run: docker build -t ivansitnikov1/repo:${{ env.TAG }} .

      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image
        run: docker push ivansitnikov1/repo:${{ env.TAG }}

      - name: Logout from Docker Hub
        run: docker logout

  deploy-test:
    if: github.ref == 'refs/heads/feature/develop_server_deploy'
    needs: build
    runs-on: ubuntu-latest
    environment: stage

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy to test server
        uses: burnett01/rsync-deployments@6.0.0
        with:
          switches: -avzr --delete
          remote_path: /opt/app/
          path: ./backend/docker-compose.yml
          remote_host: ${{ secrets.REMOTE_HOST }}
          remote_user: ${{ secrets.REMOTE_USER }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Connect to test server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.TEST_REMOTE_HOST }}
          username: ${{ secrets.TEST_REMOTE_USER }}
          key: ${{ secrets.TEST_SSH_PRIVATE_KEY }}
          script: |
            cd /opt/app
            docker compose down
            docker image rm ivansitnikov1/repo:test
            docker compose up -d --build

  deploy-prod:
    if: startsWith(github.ref, 'refs/heads/release-')
    needs: build
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy to prod server
        uses: burnett01/rsync-deployments@6.0.0
        with:
          switches: -avzr --delete
          remote_path: /opt/app/
          path: ./backend/docker-compose.yml
          remote_host: ${{ secrets.REMOTE_HOST }}
          remote_user: ${{ secrets.REMOTE_USER }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Connect to prod server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_REMOTE_HOST }}
          username: ${{ secrets.PROD_REMOTE_USER }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          script: |
            cd /opt/app
            docker compose down
            docker image rm ivansitnikov1/repo:release
            docker compose up -d --build

  deploy-test-frontend:
    if: github.ref == 'refs/heads/feature/develop_server_deploy'
    runs-on: ubuntu-latest
    environment: stage

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build
        working-directory: ./frontend
        run: npm run build
        env:
          VITE_APP_UNSPLASH_ACCESS_KEY: ${{ secrets.VITE_APP_UNSPLASH_ACCESS_KEY }}

      - name: Deploy to server
        uses: burnett01/rsync-deployments@6.0.0
        with:
          switches: -avzr --delete
          remote_path: /opt/app/frontend/build/
          path: ./frontend/dist/
          remote_host: ${{ secrets.REMOTE_HOST }}
          remote_user: ${{ secrets.REMOTE_USER }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

  deploy-test-storybook:
    if: github.ref == 'refs/heads/feature/develop_server_deploy'
    runs-on: ubuntu-latest
    environment: stage

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build Storybook
        working-directory: ./frontend
        run: npm run build-storybook

      - name: Deploy Storybook to server
        uses: burnett01/rsync-deployments@6.0.0
        with:
          switches: -avzr --delete
          remote_path: /opt/app/storybook/
          path: ./frontend/storybook-static/
          remote_host: ${{ secrets.REMOTE_HOST }}
          remote_user: ${{ secrets.REMOTE_USER }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

  deploy-prod-frontend:
    if: startsWith(github.ref, 'refs/heads/release-')
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build
        working-directory: ./frontend
        run: npm run build
        env:
          VITE_APP_UNSPLASH_ACCESS_KEY: ${{ secrets.VITE_APP_UNSPLASH_ACCESS_KEY }}

      - name: Deploy to server
        uses: burnett01/rsync-deployments@6.0.0
        with:
          switches: -avzr --delete
          remote_path: /opt/app/frontend/build/
          path: ./frontend/dist/
          remote_host: ${{ secrets.REMOTE_HOST }}
          remote_user: ${{ secrets.REMOTE_USER }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

  deploy-prod-storybook:
    if: startsWith(github.ref, 'refs/heads/release-')
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build Storybook
        working-directory: ./frontend
        run: npm run build-storybook

      - name: Deploy Storybook to server
        uses: burnett01/rsync-deployments@6.0.0
        with:
          switches: -avzr --delete
          remote_path: /opt/app/storybook/
          path: ./frontend/storybook-static/
          remote_host: ${{ secrets.REMOTE_HOST }}
          remote_user: ${{ secrets.REMOTE_USER }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}
